{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\katas\\\\BlockChainProject\\\\expense-splitter-dapp\\\\src\\\\components\\\\ConnectWallet.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { BrowserProvider } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ConnectWallet({\n  setSigner\n}) {\n  _s();\n  const [account, setAccount] = useState(null);\n  const connect = async () => {\n    if (window.ethereum) {\n      const provider = new BrowserProvider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = await provider.getSigner();\n      setSigner(signer);\n      setAccount(await signer.getAddress());\n    } else {\n      alert(\"MetaMask not found. Please install it to use this app.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center my-3\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: connect,\n      children: account ? `Connected: ${account}` : \"Connect MetaMask Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n_s(ConnectWallet, \"v+GsaBOyRPoPwJh7mxQ3zpEGSB8=\");\n_c = ConnectWallet;\nvar _c;\n$RefreshReg$(_c, \"ConnectWallet\");","map":{"version":3,"names":["useState","BrowserProvider","jsxDEV","_jsxDEV","ConnectWallet","setSigner","_s","account","setAccount","connect","window","ethereum","provider","send","signer","getSigner","getAddress","alert","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/katas/BlockChainProject/expense-splitter-dapp/src/components/ConnectWallet.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { BrowserProvider } from \"ethers\";\r\n\r\nexport default function ConnectWallet({ setSigner }) {\r\n    const [account, setAccount] = useState(null);\r\n\r\n    const connect = async () => {\r\n        if (window.ethereum) {\r\n            const provider = new BrowserProvider(window.ethereum);\r\n            await provider.send(\"eth_requestAccounts\", []);\r\n            const signer = await provider.getSigner();\r\n            setSigner(signer);\r\n            setAccount(await signer.getAddress());\r\n        } else {\r\n            alert(\"MetaMask not found. Please install it to use this app.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"text-center my-3\">\r\n            <button className=\"btn btn-primary\" onClick={connect}>\r\n                {account ? `Connected: ${account}` : \"Connect MetaMask Wallet\"}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,eAAe,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,eAAe,SAASC,aAAaA,CAAC;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EACjD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMS,OAAO,GAAG,MAAAA,CAAA,KAAY;IACxB,IAAIC,MAAM,CAACC,QAAQ,EAAE;MACjB,MAAMC,QAAQ,GAAG,IAAIX,eAAe,CAACS,MAAM,CAACC,QAAQ,CAAC;MACrD,MAAMC,QAAQ,CAACC,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;MAC9C,MAAMC,MAAM,GAAG,MAAMF,QAAQ,CAACG,SAAS,CAAC,CAAC;MACzCV,SAAS,CAACS,MAAM,CAAC;MACjBN,UAAU,CAAC,MAAMM,MAAM,CAACE,UAAU,CAAC,CAAC,CAAC;IACzC,CAAC,MAAM;MACHC,KAAK,CAAC,wDAAwD,CAAC;IACnE;EACJ,CAAC;EAED,oBACId,OAAA;IAAKe,SAAS,EAAC,kBAAkB;IAAAC,QAAA,eAC7BhB,OAAA;MAAQe,SAAS,EAAC,iBAAiB;MAACE,OAAO,EAAEX,OAAQ;MAAAU,QAAA,EAChDZ,OAAO,GAAG,cAAcA,OAAO,EAAE,GAAG;IAAyB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd;AAAClB,EAAA,CAtBuBF,aAAa;AAAAqB,EAAA,GAAbrB,aAAa;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}