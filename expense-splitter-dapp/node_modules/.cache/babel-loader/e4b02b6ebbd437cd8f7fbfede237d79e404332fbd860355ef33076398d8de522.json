{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\katas\\\\BlockChainProject\\\\expense-splitter-dapp\\\\src\\\\components\\\\ContractActions.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { getContract } from \"../utils/contract\";\nimport { parseEther } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ContractActions({\n  signer\n}) {\n  _s();\n  const [depositAmount, setDepositAmount] = useState(\"\");\n  const [recipients, setRecipients] = useState(\"\");\n  const [amounts, setAmounts] = useState(\"\");\n  const deposit = async () => {\n    try {\n      if (!depositAmount || isNaN(depositAmount)) {\n        alert(\"Please enter a valid amount in ETH.\");\n        return;\n      }\n      const contract = getContract(signer);\n      const tx = await contract.deposit({\n        value: parseEther(depositAmount)\n      });\n      await tx.wait();\n      alert(\"✅ Deposit successful!\");\n    } catch (error) {\n      console.error(\"❌ Deposit failed:\", error);\n\n      // Show cleaner error message to the user\n      if (error.code === \"INSUFFICIENT_FUNDS\") {\n        alert(\"❌ Not enough ETH in your wallet for this transaction.\");\n      } else if (error.message.includes(\"value must be\")) {\n        alert(\"❌ Invalid ETH value entered.\");\n      } else {\n        alert(\"❌ Transaction failed: \" + ((error === null || error === void 0 ? void 0 : error.message) || \"Unknown error\"));\n      }\n    }\n  };\n  const splitExpense = async () => {\n    const contract = getContract(signer);\n    const addressList = recipients.split(\",\").map(addr => addr.trim());\n    const amountList = amounts.split(\",\").map(val => parseEther(val.trim()));\n    const tx = await contract.splitExpense(addressList, amountList);\n    await tx.wait();\n    alert(\"Expense split successfully!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uD83D\\uDCB8 Deposit ETH\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control mb-2\",\n      placeholder: \"Amount in ETH\",\n      value: depositAmount,\n      onChange: e => setDepositAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-success mb-4\",\n      onClick: deposit,\n      children: \"Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uD83D\\uDCE4 Split Expense\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control mb-2\",\n      placeholder: \"Comma-separated addresses\",\n      value: recipients,\n      onChange: e => setRecipients(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control mb-2\",\n      placeholder: \"Comma-separated amounts in ETH\",\n      value: amounts,\n      onChange: e => setAmounts(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-warning\",\n      onClick: splitExpense,\n      children: \"Split\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(ContractActions, \"0QR+p7zi4pbqHNs65WQZD3W5q8k=\");\n_c = ContractActions;\nvar _c;\n$RefreshReg$(_c, \"ContractActions\");","map":{"version":3,"names":["useState","getContract","parseEther","jsxDEV","_jsxDEV","ContractActions","signer","_s","depositAmount","setDepositAmount","recipients","setRecipients","amounts","setAmounts","deposit","isNaN","alert","contract","tx","value","wait","error","console","code","message","includes","splitExpense","addressList","split","map","addr","trim","amountList","val","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/katas/BlockChainProject/expense-splitter-dapp/src/components/ContractActions.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { getContract } from \"../utils/contract\";\r\nimport { parseEther } from \"ethers\";\r\n\r\nexport default function ContractActions({ signer }) {\r\n    const [depositAmount, setDepositAmount] = useState(\"\");\r\n    const [recipients, setRecipients] = useState(\"\");\r\n    const [amounts, setAmounts] = useState(\"\");\r\n\r\n    const deposit = async () => {\r\n        try {\r\n            if (!depositAmount || isNaN(depositAmount)) {\r\n                alert(\"Please enter a valid amount in ETH.\");\r\n                return;\r\n            }\r\n    \r\n            const contract = getContract(signer);\r\n            const tx = await contract.deposit({\r\n                value: parseEther(depositAmount)\r\n            });\r\n            await tx.wait();\r\n            alert(\"✅ Deposit successful!\");\r\n        } catch (error) {\r\n            console.error(\"❌ Deposit failed:\", error);\r\n    \r\n            // Show cleaner error message to the user\r\n            if (error.code === \"INSUFFICIENT_FUNDS\") {\r\n                alert(\"❌ Not enough ETH in your wallet for this transaction.\");\r\n            } else if (error.message.includes(\"value must be\")) {\r\n                alert(\"❌ Invalid ETH value entered.\");\r\n            } else {\r\n                alert(\"❌ Transaction failed: \" + (error?.message || \"Unknown error\"));\r\n            }\r\n        }\r\n    };\r\n    \r\n\r\n    const splitExpense = async () => {\r\n        const contract = getContract(signer);\r\n        const addressList = recipients.split(\",\").map(addr => addr.trim());\r\n        const amountList = amounts.split(\",\").map(val => parseEther(val.trim()));\r\n\r\n        const tx = await contract.splitExpense(addressList, amountList);\r\n        await tx.wait();\r\n        alert(\"Expense split successfully!\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"container mt-4\">\r\n            <h3>💸 Deposit ETH</h3>\r\n            <input\r\n                className=\"form-control mb-2\"\r\n                placeholder=\"Amount in ETH\"\r\n                value={depositAmount}\r\n                onChange={e => setDepositAmount(e.target.value)}\r\n            />\r\n            <button className=\"btn btn-success mb-4\" onClick={deposit}>Deposit</button>\r\n\r\n            <h3>📤 Split Expense</h3>\r\n            <input\r\n                className=\"form-control mb-2\"\r\n                placeholder=\"Comma-separated addresses\"\r\n                value={recipients}\r\n                onChange={e => setRecipients(e.target.value)}\r\n            />\r\n            <input\r\n                className=\"form-control mb-2\"\r\n                placeholder=\"Comma-separated amounts in ETH\"\r\n                value={amounts}\r\n                onChange={e => setAmounts(e.target.value)}\r\n            />\r\n            <button className=\"btn btn-warning\" onClick={splitExpense}>Split</button>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}